// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int          @id @default(autoincrement())
  first_name      String
  last_name       String
  tasks           task[]
  clock_ins       clock_ins[]
  sub_tasks       sub_task[]
  organization    organization @relation(fields: [org_id], references: [id])
  org_id          Int
  user_timeclock  timeclock[]  @relation("user_ids")
  admin_timeclock timeclock[]  @relation("admin_ids")
  tasks_created   task[]       @relation("tasks_created")
}

model organization {
  id         Int          @id @default(autoincrement())
  org_name   String
  timezone   String
  task_board task_board[]
  shift      shift[]
  user       user[]
}

model task_board {
  id                       Int                        @id @default(autoincrement())
  task_board_name          String
  // team_user_ids   Int[]
  // admin_ids       Int[]
  task                     task[]
  org                      organization               @relation(fields: [org_id], references: [id])
  org_id                   Int
  can_create               can_create_enum
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  created_by               Int
  task_board_customisation task_board_customisation[]
}

model task_board_customisation {
  id            Int         @id @default(autoincrement())
  field_name    String
  visibility    Boolean     @default(true)
  mandatory     Boolean     @default(true)
  task_board    task_board? @relation(fields: [task_board_id], references: [id])
  task_board_id Int?
}

enum can_create_enum {
  EVERYONE
  ADMIN
}

model task {
  id                   Int                 @id @default(autoincrement())
  task_title           String?
  task_description     String?
  task_file_id         String[]
  task_frequency       task_frequency_enum
  syear                Int?
  smonth               Int?
  sdate                Int?
  shour                Int?
  sminute              Int?
  eyear                Int?
  emonth               Int?
  edate                Int?
  ehour                Int?
  eminute              Int?
  task_start_date_time String?
  task_end_date_time   String?
  task_coordinates     Float[]
  task_location        String?
  task_board           task_board          @relation(fields: [task_board_id], references: [id])
  task_board_id        Int
  sub_task             sub_task[]
  task_status          String              @default("Open")
  repeat_details       repeat_details?
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  task_tag             task_tag[]
  task_comments        task_comments[]
  user                 user[]
  created_by           user?               @relation("tasks_created", fields: [created_by_id], references: [id])
  created_by_id        Int?
}

enum task_frequency_enum {
  ONEOFF
  RECURRING
}

model sub_task {
  id                       Int      @id @default(autoincrement())
  task                     task     @relation(fields: [task_id], references: [id])
  task_description         String
  task_id                  Int
  syear                    Int
  smonth                   Int
  sdate                    Int
  shour                    Int
  sminute                  Int
  eyear                    Int
  emonth                   Int
  edate                    Int
  ehour                    Int
  eminute                  Int
  task_status              String   @default("Scheduled")
  sub_task_start_date_time String?
  sub_task_end_date_time   String?
  user_ids                 user[]
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
  created_by               Int
}

enum repeat_type_enum {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model repeat_details {
  id               Int              @id @default(autoincrement())
  stop_repeat      DateTime?
  repeat_type      repeat_type_enum
  task             task             @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task_id          Int              @unique
  how_often_repeat Int?
  day_of_week      Int[]
  day_of_month     Int?
  week_of_month    Int?
  month_of_year    Int?
}

model tag {
  id        Int        @id @default(autoincrement())
  tag_name  String
  tag_color String
  task_tag  task_tag[]
}

model task_tag {
  task    task @relation(fields: [task_id], references: [id])
  task_id Int
  tag     tag  @relation(fields: [tag_id], references: [id])
  tag_id  Int

  @@id([task_id, tag_id])
}

model task_comments {
  id         Int      @id @default(autoincrement())
  user_id    Int
  comment    String
  task       task     @relation(fields: [task_id], references: [id])
  task_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model timeclock {
  id            Int         @id @default(autoincrement())
  title         String
  assign_to_all Boolean?
  group_ids     Int[]
  locale        String
  timezone      String
  user_ids      user[]      @relation("user_ids")
  admin_ids     user[]      @relation("admin_ids")
  org_id        Int
  created_by    Int
  clock_ins     clock_ins[]
}

model clock_ins {
  id           Int       @id @default(autoincrement())
  timeclock    timeclock @relation(fields: [timeclock_id], references: [id])
  timeclock_id Int
  user         user[]
}

model shift {
  id      Int          @id @default(autoincrement())
  user_id Int
  org     organization @relation(fields: [org_id], references: [id])
  org_id  Int
  syear   Int?
  smonth  Int?
  sdate   Int?
  shour   Int?
  sminute Int?
  eyear   Int?
  emonth  Int?
  edate   Int?
  ehour   Int?
  eminute Int?
}
