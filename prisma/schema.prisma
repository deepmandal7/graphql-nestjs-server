// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int                     @id @default(autoincrement())
  first_name         String
  last_name          String
  tasks              task[]
  time_entries       time_entry[]
  sub_tasks          sub_task[]
  email_id           String?
  organization       organization            @relation(fields: [org_id], references: [id])
  org_id             Int
  admin_timesheets   timesheets[]            @relation("admins")
  tasks_created      task[]                  @relation("tasks_created")
  timesheets_created timesheets[]
  work_durations     work_durations[]
  employee_break     employee_manual_break[]
}

model organization {
  id         Int          @id @default(autoincrement())
  org_name   String
  timezone   String
  task_board task_board[]
  shift      shift[]
  user       user[]
  timesheets timesheets[]
  time_entry time_entry[]

}

model task_board {
  id                       Int                        @id @default(autoincrement())
  task_board_name          String
  // team_user_ids   Int[]
  // admin_ids       Int[]
  task                     task[]
  org                      organization               @relation(fields: [org_id], references: [id])
  org_id                   Int
  can_create               can_create_enum
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  created_by               Int
  task_board_customisation task_board_customisation[]
  task_board_status        String?
}

model task_board_customisation {
  id            Int         @id @default(autoincrement())
  field_name    String
  visibility    Boolean     @default(true)
  mandatory     Boolean     @default(true)
  task_board    task_board? @relation(fields: [task_board_id], references: [id])
  task_board_id Int?
}

enum can_create_enum {
  EVERYONE
  ADMIN
}

model task {
  id                   Int                 @id @default(autoincrement())
  task_title           String?
  task_description     String?
  task_file_id         String[]
  task_frequency       task_frequency_enum
  task_start_date_time DateTime?
  task_end_date_time   DateTime?
  task_coordinates     Float[]
  task_location        String?
  task_board           task_board          @relation(fields: [task_board_id], references: [id])
  task_board_id        Int
  sub_task             sub_task[]
  task_status          String              @default("Open")
  repeat_details       repeat_details?
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  task_tag             task_tag[]
  task_comments        task_comments[]
  user                 user[]
  created_by           user?               @relation("tasks_created", fields: [created_by_id], references: [id])
  created_by_id        Int?
}

enum task_frequency_enum {
  ONEOFF
  RECURRING
}

model sub_task {
  id                       Int       @id @default(autoincrement())
  task                     task      @relation(fields: [task_id], references: [id])
  task_description         String
  task_id                  Int
  task_status              String    @default("Scheduled")
  sub_task_start_date_time DateTime?
  sub_task_end_date_time   DateTime?
  user_ids                 user[]
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  created_by               Int
}

enum repeat_type_enum {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model repeat_details {
  id               Int              @id @default(autoincrement())
  stop_repeat      DateTime?
  repeat_type      repeat_type_enum
  task             task             @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task_id          Int              @unique
  how_often_repeat Int?
  day_of_week      Int[]
  day_of_month     Int?
  week_of_month    Int?
  month_of_year    Int?
}

model tag {
  id         Int        @id @default(autoincrement())
  tag_name   String
  tag_color  String
  task_tag   task_tag[]
  tag_status String?
}

model task_tag {
  task    task @relation(fields: [task_id], references: [id])
  task_id Int
  tag     tag  @relation(fields: [tag_id], references: [id])
  tag_id  Int

  @@id([task_id, tag_id])
}

model task_comments {
  id                   Int      @id @default(autoincrement())
  user_id              Int
  comment              String
  task                 task     @relation(fields: [task_id], references: [id])
  task_id              Int
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  task_comments_status String?
}

model timesheets {
  id                  Int              @id @default(autoincrement())
  timeclock_name      String
  assign_to_all       Boolean?
  group_ids           Int[]
  admins              user[]           @relation("admins")
  org                 organization     @relation(fields: [org_id], references: [id])
  org_id              Int
  created_by          user             @relation(fields: [created_by_id], references: [id])
  created_by_id       Int
  time_entries        time_entry[]
  general_settings    general_settings @relation(fields: [general_settings_id], references: [id])
  general_settings_id Int              @unique
  break_settings      break_settings   @relation(fields: [break_settings_id], references: [id])
  break_settings_id   Int              @unique
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
}

enum punch_type_enum {
  IN
  OUT
}

model time_entry {
  id                    Int                     @id @default(autoincrement())
  timesheet             timesheets              @relation(fields: [timesheet_id], references: [id])
  timesheet_id          Int
  shift                 shift                   @relation(fields: [shift_id], references: [id])
  shift_id              Int
  employee_manual_break employee_manual_break[]
  org                   organization            @relation(fields: [org_id], references: [id])
  org_id                Int
  status                String                  @default("Pending")
  notes                 String
  user                  user                    @relation(fields: [user_id], references: [id])
  user_id               Int
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  work_durations        work_durations[]
}

model work_durations {
  id             Int        @id @default(autoincrement())
  user           user       @relation(fields: [user_id], references: [id])
  user_id        Int
  time_entry     time_entry @relation(fields: [time_entry_id], references: [id])
  time_entry_id  Int
  check_in_time  DateTime
  check_out_time DateTime
}

model employee_manual_break {
  id            Int         @id @default(autoincrement())
  break_type    String
  duration      Int
  start_time    DateTime
  end_time      DateTime
  time_entry    time_entry? @relation(fields: [time_entry_id], references: [id])
  time_entry_id Int?
  paid          Boolean
  user          user        @relation(fields: [user_id], references: [id])
  user_id       Int
}

model shift {
  id         Int          @id @default(autoincrement())
  org        organization @relation(fields: [org_id], references: [id])
  org_id     Int
  start_time DateTime
  end_time   DateTime
  time_entry time_entry[]
}

model positions {
  id             Int    @id @default(autoincrement())
  position_title String
}

enum working_hours_calculation_enum {
  FIRSTLAST
  EVERY
}

enum minimum_hours_enum {
  STRICT
  LENIENT
}

enum manual_or_shift_minimum_hours_enum {
  MANUAL
  SHIFT
}

model workweeks {
  id                  Int               @id @default(autoincrement())
  general_settings    general_settings? @relation(fields: [general_settings_id], references: [id])
  general_settings_id Int?              @unique
  first               Boolean
  first_start_time    Int
  first_end_time      Int
  second              Boolean
  second_start_time   Int
  second_end_time     Int
  third               Boolean
  third_start_time    Int
  third_end_time      Int
  fourth              Boolean
  fourth_start_time   Int
  fourth_end_time     Int
  fifth               Boolean
  fifth_start_time    Int
  fifth_end_time      Int
  saturday            Boolean
  saturday_start_time Int
  saturday_end_time   Int
  seventh             Boolean
  seventh_start_time  Int
  seventh_end_time    Int

}

model general_settings {
  id                            Int                                @id @default(autoincrement())
  timesheets                    timesheets?
  workweek_starts_on            Int
  workweeks                     workweeks?
  working_hours_calculation     working_hours_calculation_enum
  minimum_hours                 minimum_hours_enum
  manual_or_shift_minimum_hours manual_or_shift_minimum_hours_enum
  minimum_hours_manual_full_day Int
  minimum_hours_manual_half_day Int
  restrict_clock_in             Boolean
  restrict_clock_in_to          Int
  restrict_clock_out            Boolean
  restrict_clock_out_to         Int
}

enum break_settings_toggle_enum {
  MANUAL
  AUTOMATIC
}

model employee_manual_break_definitions {
  id                Int             @id @default(autoincrement())
  break_settings    break_settings? @relation(fields: [break_settings_id], references: [id])
  break_settings_id Int?
  break_type        String
  duration          Int
  paid              Boolean
}

model employee_automatic_break_definitions {
  id                Int             @id @default(autoincrement())
  break_settings    break_settings? @relation(fields: [break_settings_id], references: [id])
  break_settings_id Int?
  duration          Int
  after_hours       Int
  order             Int
}

model break_settings {
  id                                   Int                                    @id @default(autoincrement())
  timesheets                           timesheets?
  break_settings_toggle                break_settings_toggle_enum
  is_enabled                           Boolean
  employee_manual_break_definitions    employee_manual_break_definitions[]
  employee_automatic_break_definitions employee_automatic_break_definitions[]
}
